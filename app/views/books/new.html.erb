<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
  </head>
  <body>
    <section class="books-new">

      <header class="page-header">
        <h1>List a Book</h1>
      </header>

      <div class="row">
        <div class="col-sm-6 col-sm-offset-1">
          <%= form_for :book, url: books_new_path do |form| %>

            <div class="form-group">
              <%= form.label :image %>
              <%= form.file_field :image %>
              <%= image_tag src='', id: 'image2' %>
            </div>

            <div class="form-group">
            <%= form.label :title %>
            <%= form.text_field :title, id: 'mylist', class: 'form-control awesomplete' %>
            </div>

            <div class="form-group">
            <%= form.label :author %>
            <%= form.text_field :author, id: 'author', class: 'form-control' %>
            </div>

            <div class="form-group">
              <%= form.label :condition %>
              <select class="form-control">
              <option selected>Choose option</option>
              <option>Seen better days</option>
              <option>Well read</option>
              <option>Good</option>
              <option>Like new</option>
              </select>
            </div>

            <div class="form-group">
              <%= form.label :wishlist %>
              <%= form.text_area :wishlist, class: 'form-control' %>
            </div>
            
            <div class="form-group hidden">
            <%= form.label :publisher %>
            <%= form.text_field :publisher, id: 'publisher', class: 'form-control' %>
            </div>
            
            <div class="form-group hidden">
            <%= form.label :rating %>
            <%= form.text_field :rating, id: 'rating', class: 'form-control' %>
            </div>
            
            <div class="form-group hidden">
            <%= form.label :pub_date %>
            <%= form.text_field :pub_date, id: 'pub_date', class: 'form-control' %>
            </div>
            
            <div class="form-group hidden">
            <%= form.label :cover %>
            <%= form.text_field :cover, id: 'cover', class: 'form-control' %>
            </div>
            
            <div class="form-group hidden">
            <%= form.label :description %>
            <%= form.text_field :description, id: 'description', class: 'form-control' %>
            </div>

            <div class="form-group">
              <%= form.label :category %>
              <%= form.text_field :category, class: 'form-control', id: 'category' %>
            </div>

            <div class="form-group">
            <%= form.label :location %>
            <%= form.text_field :location, class: 'form-control', id: 'search', placeholder: 'Enter postal code' %>
            </div>

            <div>
              <div id="map"></div>
            </div>
            <br>

            <%= form.submit 'List Book', class: 'btn btn-primary' %>
          <% end %>
        </div>
      </div>

      <script>
        function initAutocomplete() {
          var map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: 51.049999, lng: -114.066666},
            zoom: 13,
            mapTypeId: 'roadmap'
          });

          // Create the search box and link it to the UI element.
          var input = document.getElementById('search');
          var searchBox = new google.maps.places.SearchBox(input);
          map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            
          map.addListener('bounds_changed', function() {
            searchBox.setBounds(map.getBounds());
          });

          var markers = [];
          // Listen for the event fired when the user selects a prediction and retrieve
          // more details for that place.
          searchBox.addListener('places_changed', function() {
            var places = searchBox.getPlaces();

            if (places.length == 0) {
              return;
            }

            // Clear out the old markers.
            markers.forEach(function(marker) {
              marker.setMap(null);
            });
            markers = [];

            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function(place) {
              if (!place.geometry) {
                console.log("Returned place contains no geometry");
                return;
              }
              var icon = {
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(25, 25)
              };

              // Create a marker for each place.
              markers.push(new google.maps.Marker({
                map: map,
                icon: icon,
                title: place.name,
                position: place.geometry.location
              }));

              if (place.geometry.viewport) {
                // Only geocodes have viewport.
                bounds.union(place.geometry.viewport);
              } else {
                bounds.extend(place.geometry.location);
              }
            });
            map.fitBounds(bounds);
          });
        }
      </script>
      <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA8DHc6XyGKuFqu9QYCuJ7nK5RCKVsFLM8&libraries=places&callback=initAutocomplete"
           async defer></script>
      </section>
  </body>
</html>